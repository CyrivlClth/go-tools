// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snowflake.proto

package snowflake

import (
	"context"
	"fmt"
	"math"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NextIDReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextIDReq) Reset()         { *m = NextIDReq{} }
func (m *NextIDReq) String() string { return proto.CompactTextString(m) }
func (*NextIDReq) ProtoMessage()    {}
func (*NextIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaa8bfc3cc8f3970, []int{0}
}

func (m *NextIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextIDReq.Unmarshal(m, b)
}
func (m *NextIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextIDReq.Marshal(b, m, deterministic)
}
func (m *NextIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextIDReq.Merge(m, src)
}
func (m *NextIDReq) XXX_Size() int {
	return xxx_messageInfo_NextIDReq.Size(m)
}
func (m *NextIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NextIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_NextIDReq proto.InternalMessageInfo

type NextIDResp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextIDResp) Reset()         { *m = NextIDResp{} }
func (m *NextIDResp) String() string { return proto.CompactTextString(m) }
func (*NextIDResp) ProtoMessage()    {}
func (*NextIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaa8bfc3cc8f3970, []int{1}
}

func (m *NextIDResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextIDResp.Unmarshal(m, b)
}
func (m *NextIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextIDResp.Marshal(b, m, deterministic)
}
func (m *NextIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextIDResp.Merge(m, src)
}
func (m *NextIDResp) XXX_Size() int {
	return xxx_messageInfo_NextIDResp.Size(m)
}
func (m *NextIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NextIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_NextIDResp proto.InternalMessageInfo

func (m *NextIDResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*NextIDReq)(nil), "snowflake.NextIDReq")
	proto.RegisterType((*NextIDResp)(nil), "snowflake.NextIDResp")
}

func init() { proto.RegisterFile("snowflake.proto", fileDescriptor_aaa8bfc3cc8f3970) }

var fileDescriptor_aaa8bfc3cc8f3970 = []byte{
	// 120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xce, 0xcb, 0x2f,
	0x4f, 0xcb, 0x49, 0xcc, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x71, 0x73, 0x71, 0xfa, 0xa5, 0x56, 0x94, 0x78, 0xba, 0x04, 0xa5, 0x16, 0x2a, 0xc9, 0x70, 0x71,
	0xc1, 0x38, 0xc5, 0x05, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc,
	0x41, 0x4c, 0x99, 0x29, 0x46, 0x9e, 0x5c, 0x02, 0xc1, 0x30, 0x7d, 0xc1, 0xa9, 0x45, 0x65, 0x99,
	0xc9, 0xa9, 0x42, 0xa6, 0x5c, 0x6c, 0x10, 0x1d, 0x42, 0x22, 0x7a, 0x08, 0x5b, 0xe0, 0x26, 0x4a,
	0x89, 0x62, 0x11, 0x2d, 0x2e, 0x48, 0x62, 0x03, 0xbb, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x4d, 0x95, 0x47, 0x05, 0x9a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnowflakeServiceClient is the client API for SnowflakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowflakeServiceClient interface {
	NextID(ctx context.Context, in *NextIDReq, opts ...grpc.CallOption) (*NextIDResp, error)
}

type snowflakeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSnowflakeServiceClient(cc *grpc.ClientConn) SnowflakeServiceClient {
	return &snowflakeServiceClient{cc}
}

func (c *snowflakeServiceClient) NextID(ctx context.Context, in *NextIDReq, opts ...grpc.CallOption) (*NextIDResp, error) {
	out := new(NextIDResp)
	err := c.cc.Invoke(ctx, "/snowflake.SnowflakeService/NextID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeServiceServer is the server API for SnowflakeService service.
type SnowflakeServiceServer interface {
	NextID(context.Context, *NextIDReq) (*NextIDResp, error)
}

func RegisterSnowflakeServiceServer(s *grpc.Server, srv SnowflakeServiceServer) {
	s.RegisterService(&_SnowflakeService_serviceDesc, srv)
}

func _SnowflakeService_NextID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServiceServer).NextID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowflake.SnowflakeService/NextID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServiceServer).NextID(ctx, req.(*NextIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnowflakeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snowflake.SnowflakeService",
	HandlerType: (*SnowflakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextID",
			Handler:    _SnowflakeService_NextID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snowflake.proto",
}
